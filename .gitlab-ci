default:
  interruptible: true

include:
  - template: Jobs/SAST.gitlab-ci.yml
  - template: Jobs/Dependency-Scanning.gitlab-ci.yml
  - template: Jobs/Secret-Detection.gitlab-ci.yml
  - template: Jobs/Container-Scanning.gitlab-ci.yml

stages:
  - securityscan
  - build
  - imagescan
  - notify
  - pipeline-status

variables:
  SCAN_KUBERNETES_MANIFESTS: "false"
  GITLAB_ADVANCED_SAST_ENABLED: "true"
  AWS_DEFAULT_REGION: "us-east-1"
  AWS_ECR_REGISTRY: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com
  AWS_ECR_NAMESPACE: daai
  ENVIRONMENT: "development"
  ENV: "dev"
  AWS_ACCOUNT_ID: "891376913539"
  AWS_ACCESS_KEY_ID: "AKIA47CRUJSBYPVIQP4B"
  AWS_SECRET_ACCESS_KEY: "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"
  VULN_REPORT_TOKEN: "glpat-hRY-RY1efkAUGXyynu6G" 
  VULN_REPORT_FILENAME: "vulnerability-report.json"
  VULN_EMAIL_SENDER: "pradeep.hm1998@gmail.com"
  VULN_EMAIL_SUBJECT: "Security Report for $CI_PROJECT_NAME [$CI_COMMIT_BRANCH]"
  VULN_EMAIL_RECIPIENT: "pradeep.hm1998@gmail.com"





workflow:
  rules:
    - if: $CI_COMMIT_REF_PROTECTED == 'true'

sast:
  stage: securityscan

.sast-analyzer:
  allow_failure: true

dependency_scanning:
  stage: securityscan

.ds-analyzer:
  allow_failure: true

.secret-analyzer:
  stage: securityscan
  allow_failure: true

container_build:
  stage: build
  image: docker:27.3.1
  services:
    - docker:27.3.1-dind
  before_script:
    - apk add --no-cache aws-cli
    - aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin https://${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com
    - echo "JOB_ID=${CI_JOB_ID}" > job_id.env
  script:
    - docker build --no-cache -t ${CI_PROJECT_NAME}-${ENV}:${CI_PIPELINE_IID}-${CI_COMMIT_SHORT_SHA} .
    - docker tag ${CI_PROJECT_NAME}-${ENV}:${CI_PIPELINE_IID}-${CI_COMMIT_SHORT_SHA} ${AWS_ECR_REGISTRY}/${AWS_ECR_NAMESPACE}/${CI_PROJECT_NAME}-${ENV}:${CI_PIPELINE_IID}-${CI_COMMIT_SHORT_SHA}
    - docker push ${AWS_ECR_REGISTRY}/${AWS_ECR_NAMESPACE}/${CI_PROJECT_NAME}-${ENV}:${CI_PIPELINE_IID}-${CI_COMMIT_SHORT_SHA}
  rules:
    - if: $CI_COMMIT_BRANCH == 'master'
    - if: $CI_COMMIT_BRANCH
      exists:
        - Dockerfile
  artifacts:
    reports:
      dotenv: job_id.env
  retry:
    max: 1
    when: runner_system_failure

container_scanning:
  stage: imagescan
  needs: ["container_build"]
  allow_failure: false
  variables:
    CS_ANALYZER_IMAGE: registry.gitlab.com/security-products/container-scanning:7
    CS_IMAGE: ${AWS_ECR_REGISTRY}/${AWS_ECR_NAMESPACE}/${CI_PROJECT_NAME}-${ENV}:${CI_PIPELINE_IID}-${CI_COMMIT_SHORT_SHA}
    CS_REGISTRY_USER: AWS
    CS_REGISTRY_PASSWORD: "${AWS_ECR_PASSWORD}"
  before_script:
    - ruby -r open-uri -e "IO.copy_stream(URI.open('https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip'), 'awscliv2.zip')"
    - unzip awscliv2.zip
    - sudo ./aws/install
    - aws --version
    - export AWS_ECR_PASSWORD=$(aws ecr get-login-password --region ${AWS_DEFAULT_REGION})
  artifacts:
    reports:
      container_scanning: gl-container-scanning-report.json
  retry:
    max: 1
    when: runner_system_failure

share_log_report:
  stage: notify
  image:
    name: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base
  needs:
    job: container_build
    artifacts: true
  before_script:
    - apt-get update -y && apt-get install jq curl -y
    - 'REPORT_ID=$(curl -X POST -H "PRIVATE-TOKEN: ${VULN_REPORT_TOKEN}" https://gitlab.com/api/v4/security/projects/${CI_PROJECT_ID}/vulnerability_exports | jq -r .id)'
    - sleep 3
    - if [[ -z "${REPORT_ID}" ]]; then echo "REPORT_ID is empty, failed to churn Vulnerability Report" && exit 1; fi;
    - 'curl -s -H "Authorization: token ${GITHUB_TOKEN}" "${GITHUB_COMMIT_API}" -o authors.json'
    - 'COMMIT_AUTHORS=$( jq -r .commit.author.email authors.json | sort | uniq )'
    - RECIPIENTS=$( echo $COMMIT_AUTHORS | sed 's/ /,/g')
    - 'BUILD_JOB_LOG=$(curl --location --header "PRIVATE-TOKEN: $VULN_REPORT_TOKEN" "$CI_API_V4_URL/projects/$CI_PROJECT_ID/jobs/$JOB_ID/trace" -o job_log.json)'
    - if [[ ! -f "job_log.json" ]]; then echo "Failed downloading log." && exit 1; fi;
    - JOB_LOG=$( cat job_log.json | jq -Rs . | sed 's/^"//; s/"$//' )
    - 'curl -X GET -H "PRIVATE-TOKEN: ${VULN_REPORT_TOKEN}" https://gitlab.com/api/v4/security/vulnerability_exports/${REPORT_ID}/download -o ${VULN_REPORT_FILENAME}'
    - if [[ ! -f "${VULN_REPORT_FILENAME}" ]]; then echo "Failed downloading report. REPORT_ID is ${REPORT_ID}" && exit 1; fi;
    - VULN_REPORT_CONTENT=$(cat ${VULN_REPORT_FILENAME} | jq -Rs . | sed 's/^"//; s/"$//' )
  script:
    - if [[ ! -z "${VULN_EMAIL_RECIPIENT}" ]]; then RECIPIENTS="${RECIPIENTS},${VULN_EMAIL_RECIPIENT}"; fi;
    - |
      cat <<EOF > EMAIL_CONTENT.json
      {
        "Data": "From: $VULN_EMAIL_SENDER\nTo: $RECIPIENTS\nSubject: $VULN_EMAIL_SUBJECT\nMIME-Version: 1.0\nContent-type: Multipart/Mixed; boundary=\"NextPart\"\n\n--NextPart\nContent-Type: text/plain\n\nGreetings,\n\nPlease find attached the latest build log and vulnerability report built/scanned on project $CI_PROJECT_NAME, branch $CI_COMMIT_BRANCH, pipeline ID $CI_PIPELINE_IID.\n\n--NextPart\nContent-Type: text/plain;\nContent-Disposition: attachment; filename=\"job_log.json\"\n\n$JOB_LOG\n\n--NextPart\nContent-Type: text/plain;\nContent-Disposition: attachment; filename=\"$VULN_REPORT_FILENAME\"\n\n$VULN_REPORT_CONTENT\n\n--NextPart--"
      }
      EOF
    - aws ses send-raw-email --region ap-southeast-1 --cli-binary-format raw-in-base64-out --raw-message file://EMAIL_CONTENT.json
  when: always
  retry:
    max: 1
    when: runner_system_failure

pipeline_success:
  stage: pipeline-status
  variables:
    BUILD_STATUS: "passed"
    BUILD_KEY: "push"
  script:
    - case "$BUILD_STATUS" in
      running) GITHUB_STATE="pending";;
      passed) GITHUB_STATE="success";;
      failed) GITHUB_STATE="failure";;
      esac
    - curl -X POST "$GITHUB_STATUS_API" \
        -H "Authorization: token $GITHUB_TOKEN" \
        -H "Content-Type: application/json" \
        -d "{ \"state\": \"$GITHUB_STATE\", \"context\": \"ci/gitlab\", \"description\": \"Pipeline $BUILD_STATUS\", \"target_url\": \"$CI_PROJECT_URL/-/jobs/$CI_JOB_ID\" }"
  when: on_success

pipeline_failure:
  stage: pipeline-status
  variables:
    BUILD_STATUS: "failed"
    BUILD_KEY: "push"
  script:
    - case "$BUILD_STATUS" in
      running) GITHUB_STATE="pending";;
      passed) GITHUB_STATE="success";;
      failed) GITHUB_STATE="failure";;
      esac
    - curl -X POST "$GITHUB_STATUS_API" \
        -H "Authorization: token $GITHUB_TOKEN" \
        -H "Content-Type: application/json" \
        -d "{ \"state\": \"$GITHUB_STATE\", \"context\": \"ci/gitlab\", \"description\": \"Pipeline $BUILD_STATUS\", \"target_url\": \"$CI_PROJECT_URL/-/jobs/$CI_JOB_ID\" }"
  when: on_failure
